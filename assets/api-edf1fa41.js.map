{"version":3,"file":"api-edf1fa41.js","sources":["../../src/js/api.js"],"sourcesContent":["export async function musclesGroup(event) {\n    let currentPage = 1;\n    const limit = 8;\n    let searchQuery = '';\n\n    try {   \n        searchQuery = event.target.id;\n\n        localStorage.setItem('searchQuery', JSON.stringify({searchQuery}));\n\n        const url = `https://energyflow.b.goit.study/api/exercises?muscles=${searchQuery}&page=${currentPage}&limit=${limit}`;\n        const response = await fetch(url);\n\n        if (response.status !== 200) {\n            throw new Error('Failed to fetch data. Please try again later.');\n        }\n\n        const resultPromise = response.json();\n        const results = await resultPromise;\n\n        if (results.length === 0) {\n            throw new Error('No data found. Please try a different search term.');\n        }\n\n        return results;\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        throw error;\n    }\n}\n\n\n// bodyPart------------------------------------------------------------\nexport async function bodyPart(event) {\n    let currentPage = 1;\n    const limit = 8;\n    let searchInput = '';\n\n    try {\n        searchInput = encodeURIComponent(event.toLowerCase());\n\n        localStorage.setItem('searchInput', JSON.stringify({ searchInput }));\n\n        const url = `https://energyflow.b.goit.study/api/exercises?bodypart=${searchInput}&page=${currentPage}&limit=${limit}`;\n        const response = await fetch(url);\n\n        if (response.status !== 200) {\n            throw new Error('Failed to fetch data. Please try again later.');\n        }\n\n        const resultPromise = response.json();\n        const results = await resultPromise;\n\n\n        if (results.length === 0) {\n            throw new Error('No data found. Please try a different search term.');\n        }\n\n        return results;\n\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        throw error;\n    }\n}\n\n\n// equipment------------------------------------------------------------\nexport async function equipment(event) {\n    let currentPage = 1;\n    const limit = 8;\n    let searchQuery = '';\n\n    try {\n        searchQuery = encodeURIComponent(event.target.id);\n        console.log(searchQuery);\n\n        const url = `https://energyflow.b.goit.study/api/exercises?equipment=${searchQuery}&page=${currentPage}&limit=${limit}`;\n        const response = await fetch(url);\n\n        if (response.status !== 200) {\n            throw new Error('Failed to fetch data. Please try again later.');\n        }\n\n        const resultPromise = response.json();\n        const results = await resultPromise;\n\n        if (results.length === 0) {\n            throw new Error('No data found. Please try a different search term.');\n        }\n\n        return results;\n\n    } catch (error) {\n        console.error('Error fetching data:', error);\n        throw error;\n    }\n}\n\n// equipment------------------------------------------------------------\n\n\n// Функція для отримання цитати з backend'а-----------------------------\nasync function getQuoteFromBackend() {\n    try {\n    const response = await fetch('https://energyflow.b.goit.study/api/quote');\n    const data = await response.json();\n    return data;\n    } catch (error) {\n    console.error('Error getting quote from backend', error);\n    return null;\n    }\n}\n\n// Функція для оновлення блоку з цитатою--------------------------------\nexport async function updateQuoteBlock() {\n\n    const storedQuote = localStorage.getItem('quote');\n    const storedDate = localStorage.getItem('quoteDate');\n    const currentDate = new Date().toDateString();\n\n    if (storedQuote && storedDate === currentDate) {\n\n    return JSON.parse(storedQuote);\n    } else {\n\n    const quoteData = await getQuoteFromBackend();\n\n    if (quoteData) {\n\n        localStorage.setItem('quote', JSON.stringify(quoteData));\n        localStorage.setItem('quoteDate', currentDate);\n        return quoteData;\n    }\n    }\n}\n"],"names":["musclesGroup","event","currentPage","limit","searchQuery","url","response","results","error","bodyPart","searchInput","equipment","getQuoteFromBackend","updateQuoteBlock","storedQuote","storedDate","currentDate","quoteData"],"mappings":"AAAO,eAAeA,EAAaC,EAAO,CACtC,IAAIC,EAAc,EAClB,MAAMC,EAAQ,EACd,IAAIC,EAAc,GAElB,GAAI,CACAA,EAAcH,EAAM,OAAO,GAE3B,aAAa,QAAQ,cAAe,KAAK,UAAU,CAAC,YAAAG,CAAW,CAAC,CAAC,EAEjE,MAAMC,EAAM,yDAAyDD,CAAW,SAASF,CAAW,UAAUC,CAAK,GAC7GG,EAAW,MAAM,MAAMD,CAAG,EAEhC,GAAIC,EAAS,SAAW,IACpB,MAAM,IAAI,MAAM,+CAA+C,EAInE,MAAMC,EAAU,MADMD,EAAS,OAG/B,GAAIC,EAAQ,SAAW,EACnB,MAAM,IAAI,MAAM,oDAAoD,EAGxE,OAAOA,CACV,OAAQC,EAAO,CACZ,cAAQ,MAAM,uBAAwBA,CAAK,EACrCA,CACT,CACL,CAIO,eAAeC,EAASR,EAAO,CAClC,IAAIC,EAAc,EAClB,MAAMC,EAAQ,EACd,IAAIO,EAAc,GAElB,GAAI,CACAA,EAAc,mBAAmBT,EAAM,YAAa,CAAA,EAEpD,aAAa,QAAQ,cAAe,KAAK,UAAU,CAAE,YAAAS,CAAa,CAAA,CAAC,EAEnE,MAAML,EAAM,0DAA0DK,CAAW,SAASR,CAAW,UAAUC,CAAK,GAC9GG,EAAW,MAAM,MAAMD,CAAG,EAEhC,GAAIC,EAAS,SAAW,IACpB,MAAM,IAAI,MAAM,+CAA+C,EAInE,MAAMC,EAAU,MADMD,EAAS,OAI/B,GAAIC,EAAQ,SAAW,EACnB,MAAM,IAAI,MAAM,oDAAoD,EAGxE,OAAOA,CAEV,OAAQC,EAAO,CACZ,cAAQ,MAAM,uBAAwBA,CAAK,EACrCA,CACT,CACL,CAIO,eAAeG,EAAUV,EAAO,CACnC,IAAIC,EAAc,EAClB,MAAMC,EAAQ,EACd,IAAIC,EAAc,GAElB,GAAI,CACAA,EAAc,mBAAmBH,EAAM,OAAO,EAAE,EAChD,QAAQ,IAAIG,CAAW,EAEvB,MAAMC,EAAM,2DAA2DD,CAAW,SAASF,CAAW,UAAUC,CAAK,GAC/GG,EAAW,MAAM,MAAMD,CAAG,EAEhC,GAAIC,EAAS,SAAW,IACpB,MAAM,IAAI,MAAM,+CAA+C,EAInE,MAAMC,EAAU,MADMD,EAAS,OAG/B,GAAIC,EAAQ,SAAW,EACnB,MAAM,IAAI,MAAM,oDAAoD,EAGxE,OAAOA,CAEV,OAAQC,EAAO,CACZ,cAAQ,MAAM,uBAAwBA,CAAK,EACrCA,CACT,CACL,CAMA,eAAeI,GAAsB,CACjC,GAAI,CAGJ,OADa,MADI,MAAM,MAAM,2CAA2C,GAC5C,MAE3B,OAAQJ,EAAO,CAChB,eAAQ,MAAM,mCAAoCA,CAAK,EAChD,IACN,CACL,CAGO,eAAeK,GAAmB,CAErC,MAAMC,EAAc,aAAa,QAAQ,OAAO,EAC1CC,EAAa,aAAa,QAAQ,WAAW,EAC7CC,EAAc,IAAI,KAAM,EAAC,aAAY,EAE3C,GAAIF,GAAeC,IAAeC,EAElC,OAAO,KAAK,MAAMF,CAAW,EACtB,CAEP,MAAMG,EAAY,MAAML,IAExB,GAAIK,EAEA,oBAAa,QAAQ,QAAS,KAAK,UAAUA,CAAS,CAAC,EACvD,aAAa,QAAQ,YAAaD,CAAW,EACtCC,CAEV,CACL"}